// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  products   Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String
  description String
  price       Int
  ingredients Ingredient[]
  productItem ProductItem[]
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

model ProductItem {
  id        Int        @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
}

model Ingredient {
  id         Int        @id @default(autoincrement())
  name       String
  price      Int
  imageUrl   String
  products   Product[]
  cartItems  CartItem[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  token       String
  totalAmount Int        @default(0)
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?       @unique
  cartItems   CartItem[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model CartItem {
  id            Int          @id @default(autoincrement())
  quantity      Int          @default(1)
  ingredients   Ingredient[]
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  address     String
  comment     String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

model VerificationCode {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  code       String
  created_at DateTime @default(now())

  @@unique([userId, code])
}

model Story {
  id              Int         @id @default(autoincrement())
  previewImageUrl String
  storyItem       StoryItem[]
  created_at      DateTime    @default(now())
}

model StoryItem {
  id         Int      @id @default(autoincrement())
  sourceUrl  String
  story      Story    @relation(fields: [storyId], references: [id])
  storyId    Int
  created_at DateTime @default(now())
}
